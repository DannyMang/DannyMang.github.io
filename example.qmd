---
title: "Example Quarto Document"
author: "Your Name"
date: "2024-01-15"
format: 
  html:
    theme: cosmo
    code-fold: true
    toc: true
    toc-depth: 2
  pdf:
    documentclass: article
execute:
  echo: true
  warning: false
  message: false
---

# Introduction

This is an example Quarto document that demonstrates various features including code chunks, markdown formatting, and output generation.

## Python Data Analysis Examples

Here's a simple Python code chunk that creates a plot using sample car data:

```{python}
#| label: fig-scatter
#| fig-cap: "A scatter plot of cars data"
#| fig-width: 8
#| fig-height: 6

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

# Create sample car data similar to mtcars
np.random.seed(42)
n_cars = 32

cars_data = {
    'weight': np.random.uniform(1.5, 5.5, n_cars),
    'mpg': np.random.uniform(10, 35, n_cars),
    'cylinders': np.random.choice([4, 6, 8], n_cars)
}

# Add some correlation between weight and mpg
cars_data['mpg'] = 35 - 4 * cars_data['weight'] + np.random.normal(0, 2, n_cars)
cars = pd.DataFrame(cars_data)

# Create scatter plot
plt.figure(figsize=(10, 6))
colors = {4: 'blue', 6: 'green', 8: 'red'}
for cyl in cars['cylinders'].unique():
    subset = cars[cars['cylinders'] == cyl]
    plt.scatter(subset['weight'], subset['mpg'], 
                c=colors[cyl], label=f'{cyl} cylinders', s=60, alpha=0.7)

# Add trend line
z = np.polyfit(cars['weight'], cars['mpg'], 1)
p = np.poly1d(z)
plt.plot(cars['weight'], p(cars['weight']), "k--", alpha=0.8)

plt.xlabel('Weight (1000 lbs)')
plt.ylabel('Miles per Gallon')
plt.title('Car Weight vs Miles per Gallon')
plt.legend(title='Cylinders')
plt.grid(True, alpha=0.3)
plt.tight_layout()
plt.show()
```

### Data Summary

```{python}
#| label: tbl-summary
#| tbl-cap: "Summary statistics for cars dataset"

# Calculate summary statistics
summary = {
    'Count': len(cars),
    'Mean MPG': round(cars['mpg'].mean(), 2),
    'Median MPG': cars['mpg'].median(),
    'Min MPG': cars['mpg'].min(),
    'Max MPG': cars['mpg'].max()
}

print("Cars Dataset Summary:")
print("-" * 25)
for key, value in summary.items():
    print(f"{key}: {value}")
```

## More Python Examples

Here are additional Python examples with different libraries:

```{python}
#| label: fig-python
#| fig-cap: "Python matplotlib example"

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# Generate sample data
np.random.seed(42)
x = np.random.normal(0, 1, 100)
y = 2 * x + np.random.normal(0, 0.5, 100)

# Create plot
plt.figure(figsize=(8, 6))
plt.scatter(x, y, alpha=0.7, color='steelblue')
plt.xlabel('X values')
plt.ylabel('Y values')
plt.title('Python Generated Scatter Plot')
plt.grid(True, alpha=0.3)
plt.show()
```

### Data Analysis with Pandas

```{python}
# Create a sample dataframe
data = {
    'Name': ['Alice', 'Bob', 'Charlie', 'Diana'],
    'Age': [25, 30, 35, 28],
    'Score': [85, 92, 78, 96]
}
df = pd.DataFrame(data)

print("Sample DataFrame:")
print(df)
print(f"\nMean score: {df['Score'].mean():.2f}")
```

## Markdown Features

### Text Formatting

-   **Bold text**
-   *Italic text*
-   `Inline code`
-   ~~Strikethrough~~

### Lists

1.  First ordered item
2.  Second ordered item
    -   Nested unordered item
    -   Another nested item

### Mathematical Expressions

Inline math: $E = mc^2$

Block math: $$
\bar{x} = \frac{1}{n} \sum_{i=1}^{n} x_i
$$

### Callout Blocks

::: callout-note
This is a note callout block. It's useful for highlighting important information.
:::

::: callout-warning
This is a warning callout. Use it to draw attention to potential issues.
:::

::: callout-tip
## Pro Tip

This is a tip callout with a custom title. Great for sharing best practices!
:::

## Cross-references

You can reference figures like @fig-scatter and tables like @tbl-summary.

## Conclusion

This example demonstrates the power of Quarto for creating reproducible documents that combine:

-   Narrative text
-   Executable code (R, Python, Julia, etc.)
-   Rich output (plots, tables, etc.)
-   Professional formatting

The document can be rendered to multiple formats including HTML, PDF, and Word.